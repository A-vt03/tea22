# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: üèóÔ∏è CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  cmake-build-job:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/graugans/cpp
      options: --user root
    steps:
    - uses: actions/checkout@v3

    - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
            string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
            message("::set-output name=timestamp::${current_date}")

    - name: ccache cache files
        uses: actions/cache@v3
        with:
        path: .ccache
        key: ${‚Ää{ matrix.config.name }‚Ää}-ccache-${‚Ää{ steps.ccache_cache_timestamp.outputs.timestamp }‚Ää}
        restore-keys: |
            ${‚Ää{ matrix.config.name }‚Ää}-ccache-

    - name: üë∑ Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
           mkdir -p "${{github.workspace}}/build"
           cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: üõ†Ô∏è Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: üß™ Test
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
           ctest -C ${{env.BUILD_TYPE}} --test-dir ${{github.workspace}}/build -V

